set (ZLIB_SUPPORT_DEFAULT ON)
if (UNIX)
 include (FindPkgConfig)
 pkg_check_modules (PKG_ZLIB zlib)
 if (PKG_ZLIB_FOUND)
  set (ZLIB_FOUND TRUE)
  set (ZLIB_INCLUDE_DIRS "${PKG_ZLIB_INCLUDE_DIRS}")
  set (ZLIB_LIBRARIES "${PKG_ZLIB_LIBRARIES}")
 endif (PKG_ZLIB_FOUND)
elseif (WIN32)
 if (VCPKG_USE)
#  cmake_policy (SET CMP0074 OLD)
  find_package (zlib CONFIG)
  if (zlib_FOUND)
   set (ZLIB_FOUND TRUE)
   set (ZLIB_INCLUDE_DIRS ${VCPKG_INCLUDE_DIR_BASE})
   set (ZLIB_LIB_DIR ${VCPKG_LIB_DIR}/bin)
  endif (zlib_FOUND)
 endif (VCPKG_USE)
 if (NOT zlib_FOUND)
  set (ZLIB_LIB_FILE "zlib${LIB_FILE_SUFFIX}.lib")
  find_library (ZLIB_LIBRARY ${ZLIB_LIB_FILE}
                PATHS $ENV{LIB_ROOT}/zlib/build
                PATH_SUFFIXES ${CMAKE_BUILD_TYPE}
                DOC "searching for ${ZLIB_LIB_FILE}"
                NO_DEFAULT_PATH)
  if (NOT ZLIB_LIBRARY)
   message (WARNING "could not find ${ZLIB_LIB_FILE}, continuing")
  else ()
   message (STATUS "Found ${ZLIB_FILE} library \"${ZLIB_LIBRARY}\"")
   set (ZLIB_FOUND TRUE)
   set (ZLIB_INCLUDE_DIRS "$ENV{LIB_ROOT}/zlib;$ENV{LIB_ROOT}/zlib/build")
   set (ZLIB_LIBRARIES "${ZLIB_LIBRARY}")
   set (ZLIB_LIB_DIR "$ENV{LIB_ROOT}/zlib/build/${CMAKE_BUILD_TYPE}")
  endif (NOT ZLIB_LIBRARY)
 endif (NOT zlib_FOUND)
endif ()
if (ZLIB_FOUND)
 option (ZLIB_SUPPORT "enable zlib support" ${ZLIB_SUPPORT_DEFAULT})
 if (ZLIB_SUPPORT)
  add_definitions (-DZLIB_SUPPORT)
#  include_directories (${ZLIB_INCLUDE_DIRS})
 endif (ZLIB_SUPPORT)
endif (ZLIB_FOUND)
