set (DEEPSPEECH_SUPPORT_DEFAULT ON)
if (UNIX)
 include (FindPkgConfig)
 pkg_check_modules (PKG_DEEPSPEECH deepspeech)
 if (PKG_DEEPSPEECH_FOUND)
  set (DEEPSPEECH_FOUND TRUE)
  set (DEEPSPEECH_INCLUDE_DIRS "${PKG_DEEPSPEECH_INCLUDE_DIRS}")
  set (DEEPSPEECH_LIBRARIES "${PKG_DEEPSPEECH_LIBRARIES}")
 else ()
  set (DEEPSPEECH_LIB_FILE "libdeepspeech.so")
  find_library (DEEPSPEECH_LIBRARY ${DEEPSPEECH_LIB_FILE}
                PATHS $ENV{LIB_ROOT}/DeepSpeech/native_client
#                PATH_SUFFIXES ${CMAKE_BUILD_TYPE}
                DOC "searching for ${DEEPSPEECH_LIB_FILE}")
  if (NOT DEEPSPEECH_LIBRARY)
   message (WARNING "could not find ${DEEPSPEECH_LIB_FILE}, continuing")
  else ()
   message (STATUS "Found ${DEEPSPEECH_LIB_FILE} library \"${DEEPSPEECH_LIBRARY}\"")
   set (DEEPSPEECH_FOUND TRUE)
   set (DEEPSPEECH_INCLUDE_DIRS "$ENV{LIB_ROOT}/DeepSpeech/native_client")
   set (DEEPSPEECH_LIBRARIES "${DEEPSPEECH_LIBRARY}")
#   set (DEEPSPEECH_LIB_DIR "$ENV{LIB_ROOT}/DeepSpeech/native_client")
  endif (NOT DEEPSPEECH_LIBRARY) 
 endif (PKG_DEEPSPEECH_FOUND)
elseif (WIN32)
 if (VCPKG_SUPPORT)
#  cmake_policy (SET CMP0074 OLD)
  find_package (deepspeech CONFIG)
  if (deepspeech_FOUND)
   set (DEEPSPEECH_FOUND TRUE)
   if (CMAKE_BUILD_TYPE STREQUAL "Debug" OR
       CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
    set (DEEPSPEECH_LIB_DIR "${VCPKG_ROOT}/installed/${VCPKG_TARGET_TRIPLET}/debug/bin")
   else ()
    set (DEEPSPEECH_LIB_DIR "${VCPKG_ROOT}/installed/${VCPKG_TARGET_TRIPLET}/bin")
   endif ()
  endif (deepspeech_FOUND)
 endif (VCPKG_SUPPORT)
 if (NOT deepspeech_FOUND)
  set (DEEPSPEECH_LIB_FILE "deepspeech${LIB_FILE_SUFFIX}.lib")
  find_library (DEEPSPEECH_LIBRARY ${DEEPSPEECH_LIB_FILE}
                PATHS $ENV{LIB_ROOT}/DeepSpeech/native_client
#                PATH_SUFFIXES ${CMAKE_BUILD_TYPE}
                DOC "searching for ${DEEPSPEECH_LIB_FILE}"
                NO_DEFAULT_PATH)
  if (NOT DEEPSPEECH_LIBRARY)
   message (WARNING "could not find ${DEEPSPEECH_LIB_FILE}, continuing")
  else ()
   message (STATUS "Found ${DEEPSPEECH_LIB_FILE} library \"${DEEPSPEECH_LIBRARY}\"")
   set (DEEPSPEECH_FOUND TRUE)
   set (DEEPSPEECH_INCLUDE_DIRS "$ENV{LIB_ROOT}/DeepSpeech/native_client")
   set (DEEPSPEECH_LIBRARIES "${DEEPSPEECH_LIBRARY}")
   set (DEEPSPEECH_LIB_DIR "$ENV{LIB_ROOT}/DeepSpeech/native_client")
  endif (NOT DEEPSPEECH_LIBRARY)
 endif (NOT deepspeech_FOUND)
endif ()
if (DEEPSPEECH_FOUND)
 option (DEEPSPEECH_SUPPORT "enable deepspeech support" ${DEEPSPEECH_SUPPORT_DEFAULT})
 if (DEEPSPEECH_SUPPORT)
  add_definitions (-DDEEPSPEECH_SUPPORT)
#  include_directories (${DEEPSPEECH_INCLUDE_DIRS})
 endif (DEEPSPEECH_SUPPORT)
endif (DEEPSPEECH_FOUND)

